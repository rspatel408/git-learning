var CXBootstrapLoader = /** @class */ (function () {
    function CXBootstrapLoader() {
        var _a;
        this.scriptTagNode = (_a = document.currentScript) !== null && _a !== void 0 ? _a : document.querySelector('script[src*="/bootstrapper"]');
    }
    CXBootstrapLoader.prototype.load = function (options) {
        var _a, _b, _c, _d;
        var cxBootInitUrl = null;
        var base = this.getBaseURL();
        cxBootInitUrl = base + "/cxo/cx-bootstrapper-init";
        if (document.querySelectorAll("script[src=\"" + cxBootInitUrl + "\"]").length === 0) {
            var configParams = this.getBootstrapperSrcParams();
            if (typeof options !== 'undefined' && options !== null) {
                configParams.groupId = (_a = options.gid) !== null && _a !== void 0 ? _a : configParams.groupId;
                configParams.videoContainer = (_b = options.vc) !== null && _b !== void 0 ? _b : configParams.videoContainer;
                configParams.baseId = (_c = options.bid) !== null && _c !== void 0 ? _c : configParams.baseId;
                configParams.esm6Mod = (_d = options.esm6Mod) !== null && _d !== void 0 ? _d : configParams.esm6Mod;
            }
            var cxBootReference = document.createElement('script');
            cxBootReference.setAttribute('async', '');
            cxBootReference.setAttribute('type', 'text/javascript');
            cxBootReference.setAttribute('src', cxBootInitUrl);
            cxBootReference.setAttribute('id', 'cx-bootstrapper');
            if (typeof configParams.groupId !== 'undefined' && configParams.groupId !== null) {
                cxBootReference.setAttribute('data-group-id', configParams.groupId);
            }
            if (typeof configParams.videoContainer !== 'undefined' && configParams.videoContainer !== null) {
                cxBootReference.setAttribute('data-video-container', configParams.videoContainer);
            }
            if (typeof configParams.attachToTop !== 'undefined' && configParams.attachToTop !== null) {
                cxBootReference.setAttribute('data-attach-to-top', configParams.attachToTop);
            }
            if (typeof configParams.baseId !== 'undefined' && configParams.baseId !== null) {
                cxBootReference.setAttribute('data-base-id', configParams.baseId);
            }
            if (typeof configParams.esm6Mod !== 'undefined' && configParams.esm6Mod !== null) {
                cxBootReference.setAttribute('data-esm6-mod', configParams.esm6Mod);
            }
            if (typeof configParams.continuousLoad !== 'undefined' && configParams.continuousLoad !== null) {
                cxBootReference.setAttribute('data-continuous-load', configParams.continuousLoad);
            }
            document.head.appendChild(cxBootReference);
        }
    };
    CXBootstrapLoader.prototype.debugLog = function (txt) {
        console.log("%c cxbl." + txt, 'background: #09357a; color: #FFF');
    };
    CXBootstrapLoader.prototype.getBootstrapperSrcParams = function () {
        var returnParams = {
            'groupId': null,
            'videoContainer': null,
            'attachToTop': null,
            'baseId': null,
            'esm6Mod': null,
            'continuousLoad': null
        };
        var cxBootstrapperScript = this.scriptTagNode;
        /*
        const bootstrapperScripts = document.querySelectorAll('script[src*="/bootstrapper"]')
        if(bootstrapperScripts.length > 0){
          bootstrapperScripts.forEach(s => {
            if((typeof cxBootstrapperScript === 'undefined' || cxBootstrapperScript === null) && ((s as HTMLScriptElement).src.indexOf('catapultx.com') !== -1 || (s as HTMLScriptElement).src.indexOf('localhost') !== -1 )){
              cxBootstrapperScript = (s as HTMLScriptElement);
            }
          })
        }
        */
        if ((typeof cxBootstrapperScript !== 'undefined' && cxBootstrapperScript !== null)) {
            var cxBootstrapperParams = cxBootstrapperScript.src.split('?');
            var cxBootstrapperDefinedProperties = (cxBootstrapperParams.length > 1) ? cxBootstrapperParams[1].split('&') : [];
            if (cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('group-id=') !== -1; })) {
                returnParams.groupId = cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('group-id=') !== -1; }).split('=')[1];
            }
            else if (cxBootstrapperScript.getAttribute('data-group-id') != null) {
                returnParams.groupId = cxBootstrapperScript.getAttribute('data-group-id');
            }
            if (cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('video-container=') !== -1; })) {
                returnParams.videoContainer = cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('video-container=') !== -1; }).split('=')[1];
            }
            else if (cxBootstrapperScript.getAttribute('data-video-container') != null) {
                returnParams.videoContainer = cxBootstrapperScript.getAttribute('data-video-container');
            }
            if (cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('attach-to-top=') !== -1; })) {
                returnParams.attachToTop = cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('attach-to-top=') !== -1; }).split('=')[1];
            }
            if (cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('base-id=') !== -1; })) {
                returnParams.baseId = cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('base-id=') !== -1; }).split('=')[1];
            }
            else if (cxBootstrapperScript.getAttribute('data-base-id') != null) {
                returnParams.baseId = cxBootstrapperScript.getAttribute('data-base-id');
            }
            if (cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('bid=') !== -1; })) {
                returnParams.baseId = cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('bid=') !== -1; }).split('=')[1];
            }
            else if (cxBootstrapperScript.getAttribute('data-bid') != null) {
                returnParams.baseId = cxBootstrapperScript.getAttribute('data-bid');
            }
            if (cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('esm6-mod=') !== -1; })) {
                returnParams.esm6Mod = cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('esm6-mod=') !== -1; }).split('=')[1];
            }
            else if (cxBootstrapperScript.getAttribute('data-esm6-mod') != null) {
                returnParams.esm6Mod = cxBootstrapperScript.getAttribute('data-esm6-mod');
            }
            if (cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('continuous-load=') !== -1; })) {
                returnParams.continuousLoad = cxBootstrapperDefinedProperties.find(function (prop) { return prop.indexOf('continuous-load=') !== -1; }).split('=')[1];
            }
            else if (cxBootstrapperScript.getAttribute('continuous-load') != null) {
                returnParams.continuousLoad = cxBootstrapperScript.getAttribute('continuous-load');
            }
        }
        return returnParams;
    };
    CXBootstrapLoader.prototype.getBaseURL = function (base) {
        var scriptSrc = this.scriptTagNode.src;
        base !== null && base !== void 0 ? base : (base = scriptSrc.substring(0, scriptSrc.indexOf('/bootstrapper')));
        var cxtier;
        var tierParam;
        var windowLocation = window.location;
        var windowProtocol = window.location.protocol;
        if (windowLocation !== window.top.location) {
            this.debugLog('getBaseURL iframe detected');
            try {
                windowLocation = window.top.location;
                windowProtocol = window.top.location.protocol;
            }
            catch (err) {
                this.debugLog('getBaseURL error was trapped accessing origin location ' + err);
            }
        }
        tierParam = window.parent.location.search.substring(1).split('&').filter(function (el) {
            return el.indexOf('cxtier=') > -1;
        })[0];
        if (typeof tierParam !== 'undefined' && tierParam !== null) {
            this.debugLog("getBaseURL querystring cxtier found: " + tierParam);
            cxtier = tierParam.split('=')[1];
            switch (cxtier.toUpperCase()) {
                case 'DEV':
                    cxtier = windowProtocol + '//dev.catapultx.com';
                    break;
                case 'STAGE':
                    cxtier = windowProtocol + '//stage.catapultx.com';
                    break;
                case 'LOCAL':
                    cxtier = 'http://localhost:3001';
                    break;
                default:
                    this.debugLog("getBaseURL cxtier " + tierParam + " not recognized as valid environment( dev || stage || local )");
                    cxtier = null;
                    break;
            }
        }
        if (typeof cxtier !== "undefined" && cxtier !== null) {
            base = cxtier;
            this.debugLog("getBaseURL cxtier used for --base = " + base);
        }
        else {
            if (typeof base === 'undefined' || base === null || base === '') {
                base = 'https://tags.catapultx.com';
            }
            this.debugLog("getBaseURL --base = " + base);
        }
        return base;
    };
    return CXBootstrapLoader;
}());
(function selfLoader() {
    var continueBootLoad = true;
    var cxtier;
    var tierParam;
    var windowLocation = window.location;
    var windowProtocol = window.location.protocol;
    if (windowLocation !== window.top.location) {
        try {
            windowLocation = window.top.location;
            windowProtocol = window.top.location.protocol;
        }
        catch (err) {
        }
    }
    tierParam = window.parent.location.search.substring(1).split('&').filter(function (el) { return el.indexOf('cxtier=') > -1; })[0];
    if (typeof tierParam !== 'undefined' && tierParam !== null) {
        console.log("%c cxbl.selfLoading querystring cxtier found: " + tierParam, 'background: #09357a; color: #FFF');
        cxtier = tierParam.split('=')[1];
        switch (cxtier.toUpperCase()) {
            case 'DEV':
                cxtier = windowProtocol + '//dev.catapultx.com';
                break;
            case 'STAGE':
                cxtier = windowProtocol + '//stage.catapultx.com';
                break;
            case 'LOCAL':
                cxtier = 'http://localhost:3001';
                break;
            default:
                cxtier = null;
                break;
        }
        if (cxtier !== null) {
            //Find CX bootstrapper
            var bootstrapperScripts = document.querySelectorAll('script[src*="/bootstrapper"]');
            var cxBootstrapperScript_1;
            if (bootstrapperScripts.length > 0) {
                bootstrapperScripts.forEach(function (s) {
                    if ((typeof cxBootstrapperScript_1 === 'undefined' || cxBootstrapperScript_1 === null) && (s.src.indexOf('catapultx.com') !== -1 || s.src.indexOf('localhost') !== -1)) {
                        cxBootstrapperScript_1 = s;
                    }
                });
            }
            if (typeof cxBootstrapperScript_1 !== 'undefined' && cxBootstrapperScript_1 !== null && cxBootstrapperScript_1.src.indexOf(cxtier) !== 0) {
                var bootstrapperSrc = cxtier + cxBootstrapperScript_1.src.substring(cxBootstrapperScript_1.src.indexOf('/bootstrapper'));
                var cxBootstrapLoadClone_1 = document.createElement('script');
                Array.from(cxBootstrapperScript_1.attributes).forEach(function (attribute) {
                    cxBootstrapLoadClone_1.setAttribute(attribute.nodeName, attribute.nodeValue);
                });
                cxBootstrapLoadClone_1.setAttribute('async', '');
                cxBootstrapLoadClone_1.setAttribute('type', 'text/javascript');
                cxBootstrapLoadClone_1.setAttribute('src', bootstrapperSrc);
                var bootstrapLoaderParent = cxBootstrapperScript_1.parentElement;
                bootstrapLoaderParent.removeChild(cxBootstrapperScript_1);
                bootstrapLoaderParent.appendChild(cxBootstrapLoadClone_1);
                continueBootLoad = false;
                console.log('%c cxbl.selfLoading Bootstrap loader removed from page and replaced with bootstrap loader with src: ' + bootstrapperSrc, 'background: #09357a; color: #FFF', cxBootstrapLoadClone_1);
            }
        }
    }
    if (continueBootLoad) {
        console.log("%c cxbl.selfLoading CX bootstrap loader....", 'background: #09357a; color: #FFF');
        var cxBootLoader = new CXBootstrapLoader();
        if (typeof tierParam !== 'undefined' && tierParam !== null) {
            console.log("%c cxbl.selfLoading typeof videojs !== 'undefined'? " + (typeof videojs !== 'undefined'), 'background: #0f479e; color: #FFF');
        }
        if (typeof videojs !== 'undefined' &&
            videojs !== undefined &&
            videojs !== null) {
            // This check will only register a videojs plugin for a Brightcove player.  
            // Since the loader is directly in the Brightcove code, there are no players loaded at the time of this function call.
            // Brightcove with call the function once the player is loaded
            // all other videojs players will run through our normal implementation
            if (typeof tierParam !== 'undefined' && tierParam !== null) {
                console.log("%c Brightcove check:\n          typeof videojs.getPlugin === 'function': " + (typeof videojs.getPlugin === 'function') + "\n          videojs.getPlugin('CatapultX') === undefined: " + (videojs.getPlugin('CatapultX') === undefined) + "\n          videojs.getAllPlayers().length === 0: " + (videojs.getAllPlayers().length === 0), 'background: #0f479e; color: #FFF');
            }
            if (typeof videojs.getPlugin === 'function' && videojs.getPlugin('CatapultX') === undefined && videojs.getAllPlayers().length === 0) {
                console.log('%c cxbl.selfLoading CX bootstrap registering videojs plugin....', 'background: #09357a; color: #FFF');
                videojs.registerPlugin('CatapultX', function (options) {
                    console.log('%c cxbl.selfLoading CX bootstrap loading via videojs plugin....', 'background: #09357a; color: #FFF');
                    cxBootLoader.load(options);
                });
            }
            else {
                cxBootLoader.load(null);
            }
        }
        else {
            cxBootLoader.load(null);
        }
    }
})();
